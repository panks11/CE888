import tensorflow as tf
import os
import time
import typing
from typing import Any, Tuple
import numpy as np

embedding_matrix = ""

root_logdir = os.path.join(os.curdir, "my_logs")


def get_run_logdir():
    '''tensorboad directory setup'''
    run_id = time.strftime("run_%Y_%m_%d-%H_%M_%S")
    return os.path.join(root_logdir, run_id)

# The model is tweaked as per our problem statement from Tensor flow Tutorials https://www.tensorflow.org/text/tutorials/nmt_with_attention
class Encoder(tf.keras.layers.Layer):
    '''
    Input: Tokenized sentences
    Process:
    - Embedding layer creates embedding vector for each token 
    - GRU layer encodes the information in the input using the embedding input
    Returns:
    - GRU output for attehntion head
    - internal states passed to decoder
    '''
    def __init__(self, input_vocab_size, embedding_dim, encoder_units):
        super(Encoder, self).__init__()
        self.encoder_units = encoder_units
        self.input_vocab_size = input_vocab_size

        if embedding_matrix:
            self.embedding = tf.keras.layers.Embedding(
                self.input_vocab_size, embedding_dim, weights=[embedding_matrix]
            )
        else:
            self.embedding = tf.keras.layers.Embedding(
                self.input_vocab_size, embedding_dim
            )

        self.gru = tf.keras.layers.GRU(
            self.encoder_units,
            # Return the sequence and state
            return_sequences=True,
            return_state=True,
            recurrent_initializer="glorot_uniform",
        )

    def call(self, tokens, state=None):
        vectors = self.embedding(tokens)
        output, state = self.gru(vectors, initial_state=state)
        return output, state


class BahdanauAttention(tf.keras.layers.Layer):
    
    '''
    Attention Layer helps decoder to selectively focus on parts of the input sequence
    Input:
    - query: generated by  decoder
    - value: output of encoder.
    - mask: exclude padding
    
    Output:
    - attention weights calculated as softmax accross encoder output sequence
    - context vector wiegted sum of encoder inputs
    '''
    def __init__(self, units):
        super().__init__()
        self.W1 = tf.keras.layers.Dense(units, use_bias=False)
        self.W2 = tf.keras.layers.Dense(units, use_bias=False)

        self.attention = tf.keras.layers.AdditiveAttention()

    def call(self, query, value, mask):

        w1_query = self.W1(query)
        w2_key = self.W2(value)

        query_mask = tf.ones(tf.shape(query)[:-1], dtype=bool)
        value_mask = mask

        context_vector, attention_weights = self.attention(
            inputs=[w1_query, value, w2_key],
            mask=[query_mask, value_mask],
            return_attention_scores=True,
        )

        return context_vector, attention_weights


class DecoderInput(typing.NamedTuple):
    new_tokens: Any
    enc_output: Any
    mask: Any


class DecoderOutput(typing.NamedTuple):
    logits: Any
    attention_weights: Any


class Decoder(tf.keras.layers.Layer):
    '''
    Input:
    - encoder output.
    Output:
    - Generates 'attention vector' using Context Vector
    - Based on 'attention vector' Generates logit predictions for next token based
    '''
    def __init__(self, output_vocab_size, embedding_dim, dec_units):
        super(Decoder, self).__init__()
        self.dec_units = dec_units
        self.output_vocab_size = output_vocab_size
        self.embedding_dim = embedding_dim
        self.embedding = tf.keras.layers.Embedding(
            self.output_vocab_size, embedding_dim
        )


        self.gru = tf.keras.layers.GRU(
            self.dec_units,
            return_sequences=True,
            return_state=True,
            recurrent_initializer="glorot_uniform",
        )


        self.attention = BahdanauAttention(self.dec_units)

  
        self.Wc = tf.keras.layers.Dense(
            dec_units, activation=tf.math.tanh, use_bias=False
        )

        self.fc = tf.keras.layers.Dense(self.output_vocab_size)

    def call(self, inputs: DecoderInput, state=None) -> Tuple[DecoderOutput, tf.Tensor]:

        vectors = self.embedding(inputs.new_tokens)

        rnn_output, state = self.gru(vectors, initial_state=state)

        context_vector, attention_weights = self.attention(
            query=rnn_output, value=inputs.enc_output, mask=inputs.mask
        )

        context_and_rnn_output = tf.concat([context_vector, rnn_output], axis=-1)

        attention_vector = self.Wc(context_and_rnn_output)

        logits = self.fc(attention_vector)

        return DecoderOutput(logits, attention_weights), state


class MaskedLoss(tf.keras.losses.Loss):
    '''
    SparseCategoricalCrossentropy with masked loss for token ids = 0
    '''
    def __init__(self):
        self.name = "masked_loss"
        self.loss = tf.keras.losses.SparseCategoricalCrossentropy(
            from_logits=True, reduction="none"
        )

    def __call__(self, y_true, y_pred):
        loss = self.loss(y_true, y_pred)

        mask = tf.cast(y_true != 0, tf.float32)
        loss *= mask

        return tf.reduce_sum(loss)


class TrainTranslator(tf.keras.Model):
    '''
    Training class
    '''
    def __init__(
        self,
        embedding_dim,
        units,
        input_text_processor,
        output_text_processor,
        use_tf_function=True,
    ):
        super().__init__()
        encoder = Encoder(input_text_processor.vocabulary_size(), embedding_dim, units)
        decoder = Decoder(output_text_processor.vocabulary_size(), embedding_dim, units)

        self.encoder = encoder
        self.decoder = decoder
        self.input_text_processor = input_text_processor
        self.output_text_processor = output_text_processor
        self.use_tf_function = use_tf_function

    def train_step(self, inputs):
        if self.use_tf_function:
            return self._tf_train_step(inputs)
        else:
            return self._train_step(inputs)

    def _preprocess(self, input_text, target_text):

        input_tokens = self.input_text_processor(input_text)
        target_tokens = self.output_text_processor(target_text)

        input_mask = input_tokens != 0

        target_mask = target_tokens != 0

        return input_tokens, input_mask, target_tokens, target_mask

    def _train_step(self, inputs):
        input_text, target_text = inputs

        (input_tokens, input_mask, target_tokens, target_mask) = self._preprocess(
            input_text, target_text
        )

        max_target_length = tf.shape(target_tokens)[1]

        with tf.GradientTape() as tape:
            enc_output, enc_state = self.encoder(input_tokens)
            dec_state = enc_state
            loss = tf.constant(0.0)

            for t in tf.range(max_target_length - 1):
             
                new_tokens = target_tokens[:, t : t + 2]
                step_loss, dec_state = self._loop_step(
                    new_tokens, input_mask, enc_output, dec_state
                )
                loss = loss + step_loss

           
            average_loss = loss / tf.reduce_sum(tf.cast(target_mask, tf.float32))

     
        variables = self.trainable_variables
        gradients = tape.gradient(average_loss, variables)
        self.optimizer.apply_gradients(zip(gradients, variables))

       
        return {"batch_loss": average_loss}

    def _loop_step(self, new_tokens, input_mask, enc_output, dec_state):
        input_token, target_token = new_tokens[:, 0:1], new_tokens[:, 1:2]

       
        decoder_input = DecoderInput(
            new_tokens=input_token, enc_output=enc_output, mask=input_mask
        )

        dec_result, dec_state = self.decoder(decoder_input, state=dec_state)

    
        y = target_token
        y_pred = dec_result.logits
     
        step_loss = self.loss(y, y_pred)

        return step_loss, dec_state

    @tf.function(
        input_signature=[
            [
                tf.TensorSpec(dtype=tf.string, shape=[None]),
                tf.TensorSpec(dtype=tf.string, shape=[None]),
            ]
        ]
    )
    def _tf_train_step(self, inputs):
        return self._train_step(inputs)


class BatchLogs(tf.keras.callbacks.Callback):
    '''
    Capture Logs in callback
    '''
    def __init__(self, key):
        self.key = key
        self.logs = []

    def on_train_batch_end(self, n, logs):
        self.logs.append(logs[self.key])


class Translator(tf.Module):
    '''
    Prediction class
    '''
    def __init__(self, encoder, decoder, input_text_processor, output_text_processor):
        self.encoder = encoder
        self.decoder = decoder
        self.input_text_processor = input_text_processor
        self.output_text_processor = output_text_processor

        self.output_token_string_from_index = tf.keras.layers.StringLookup(
            vocabulary=output_text_processor.get_vocabulary(),
            mask_token="",
            invert=True,
        )

        index_from_string = tf.keras.layers.StringLookup(
            vocabulary=output_text_processor.get_vocabulary(), mask_token=""
        )
        token_mask_ids = index_from_string(["", "[unk]", "[start]"]).numpy()

        token_mask = np.zeros([index_from_string.vocabulary_size()], dtype=np.bool)
        token_mask[np.array(token_mask_ids)] = True
        self.token_mask = token_mask

        self.start_token = index_from_string(tf.constant("[start]"))
        self.end_token = index_from_string(tf.constant("[end]"))

    def tokens_to_text(self, result_tokens):

        result_text_tokens = self.output_token_string_from_index(result_tokens)

        result_text = tf.strings.reduce_join(result_text_tokens, axis=1, separator=" ")

        result_text = tf.strings.strip(result_text)

        return result_text

    def sample(self, logits, temperature):

        token_mask = self.token_mask[tf.newaxis, tf.newaxis, :]

        logits = tf.where(self.token_mask, -np.inf, logits)

        if temperature == 0.0:
            new_tokens = tf.argmax(logits, axis=-1)
        else:
            logits = tf.squeeze(logits, axis=1)
            new_tokens = tf.random.categorical(logits / temperature, num_samples=1)

        return new_tokens


def translate_unrolled(
    self, input_text, *, max_length=50, return_attention=True, temperature=1.0
):
    batch_size = tf.shape(input_text)[0]
    input_tokens = self.input_text_processor(input_text)
    enc_output, enc_state = self.encoder(input_tokens)

    dec_state = enc_state
    new_tokens = tf.fill([batch_size, 1], self.start_token)

    result_tokens = []
    attention = []
    done = tf.zeros([batch_size, 1], dtype=tf.bool)

    for _ in range(max_length):
        dec_input = DecoderInput(
            new_tokens=new_tokens, enc_output=enc_output, mask=(input_tokens != 0)
        )

        dec_result, dec_state = self.decoder(dec_input, state=dec_state)

        attention.append(dec_result.attention_weights)

        new_tokens = self.sample(dec_result.logits, temperature)

        # If a sequence produces an `end_token`, set it `done`
        done = done | (new_tokens == self.end_token)
        # Once a sequence is done it only produces 0-padding.
        new_tokens = tf.where(done, tf.constant(0, dtype=tf.int64), new_tokens)

        # Collect the generated tokens
        result_tokens.append(new_tokens)

        if tf.executing_eagerly() and tf.reduce_all(done):
            break

    # Convert the list of generates token ids to a list of strings.
    result_tokens = tf.concat(result_tokens, axis=-1)
    result_text = self.tokens_to_text(result_tokens)

    if return_attention:
        attention_stack = tf.concat(attention, axis=1)
        return {"text": result_text, "attention": attention_stack}
    else:
        return {"text": result_text}


Translator.translate = translate_unrolled


def exact_match_accuracy(query, result):
    '''
    Input:
    query : Target SQL list
    result : Predicted SQL list
    '''
    count = 0
    for i in range(len(query)):
        pred = result["text"][i].numpy().decode().lower().replace(" ", "")
        act = query[i].lower().replace(" ", "")
        print("Actual", act)
        print("Pred", pred)
        if pred == act:
            count = count + 1
    print("Accuracy is {:.2f} %".format(count * 100 / len(query)))
